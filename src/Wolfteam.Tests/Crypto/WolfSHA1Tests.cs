// Copyright (c) AeonLucid. All Rights Reserved.
// Licensed under the AGPL-3.0 License.
// Solution Wolfteam, Date 2025-01-21.

using Wolfteam.Server.Crypto;

namespace Wolfteam.Tests.Crypto;

public class WolfSHA1Tests
{
    [Test]
    public void TestEmptyBuffer()
    {
        TestBuffer(
            [],
            [0x19, 0xea, 0x6c, 0xf9, 0x56, 0xdd, 0xd1, 0x8a, 0x4a, 0x08, 0xac, 0x17, 0x10, 0xc6, 0x92, 0x3d, 0xef, 0xc0, 0x08, 0x77]
        );
    }
    
    [Test]
    public void TestSmallBuffer()
    {
        TestBuffer(
            [0x61, 0x61, 0x61],
            [0x87, 0x8a, 0xfc, 0x5d, 0x3e, 0xa0, 0x1a, 0x38, 0x6a, 0xb2, 0x3a, 0x96, 0xdd, 0x0f, 0x5f, 0x64, 0xfa, 0x7d, 0x84, 0x60]
        );
    }
    
    [Test]
    public void TestLargeBuffer()
    {
        TestBuffer(
            [
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
                0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61
            ],
            [0x8a,0xfa,0x49,0x64,0x6d,0x69,0x33,0x20,0xd9,0xde,0x9f,0x67,0x38,0xe2,0x32,0xb3,0x49,0x1e,0xef,0x0f]
        );
    }

    [Test]
    public void TestBuddyServer()
    {
        TestBuffer(
            [
                0x41, 0x65, 0x6f, 0x6e, 0x4c, 0x75, 0x63, 0x69, 0x64, 0xdf, 0x78, 0x00, 0x00
            ],
            [0x1f,0x20,0xde,0xfa,0x44,0xb5,0x5d,0x56,0x85,0xd4,0xf8,0x52,0x55,0x67,0x5c,0xd8,0x79,0x21,0x1c,0x81]
        );
    }

    private void TestBuffer(byte[] input, byte[] output)
    {
        var outputBuffer = new byte[20];
        
        WolfSHA1.Hash(input, outputBuffer);
        
        Assert.That(outputBuffer, Is.EqualTo(output));
    }
}